/**
 * Border implementation which doesn't break baseline.
 */
@mixin baselineAwareBorder($color: $border-color, $width: 1px, $orientation: 'top', $offset: 0, $size: 100%) {
    position: relative;

    &:before {
        content: '';
        display: block;
        width: $size;
        position: absolute;

        @if ($orientation == 'top') {
            top: $offset;
            border-top: $width $color solid;
        }

        @if ($orientation == 'bottom') {
            bottom: $offset;
            border-bottom: $width $color solid;
        }
    }
}

@mixin baselineAwareBorderCancel($orientation: 'top') {
    &:before {
        @if ($orientation == 'top') {
            border-top: 0;
        }

        @if ($orientation == 'bottom') {
            border-bottom: 0;
        }
    }
}

/**
 * Simple Sassline breakpoint wrapper to allow named breakpoints.
 * @see: $breakpoint-aliases
 */
@mixin deviceBreakpoint($alias: 0) {
    @include breakpoint(map-get($breakpoint-aliases, $alias)) {
        @content;
    };
}

@function getDeviceBreakpointName($alias) {
    @return map-get($breakpoint-aliases, $alias);
}

@function deviceBreakpointWidth($alias) {
    @return map-get($breakpoints, getDeviceBreakpointName($alias)) / 16 * 1rem;
}

@function getFontFamily($type) {
    @return unquote(map-get($type, font-family));
}


@mixin triangle($size, $color, $direction) {
    height: 0;
    width: 0;
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;

    @if $direction == up {
        border-bottom-color: $color;
    } @else if $direction == right {
        border-left-color:   $color;
    } @else if $direction == down {
        border-top-color:    $color;
    } @else if $direction == left {
        border-right-color:  $color;
    }
}


@mixin borderedTriangle($size, $border-width, $color, $border-color, $direction, $alt: false) {
    $back-size: $size + ($border-width * 2);
    position: relative;

    min-width: $size;
    min-height: $size;

    &:after,
    &:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
    }

    &:after {
        @include triangle($size, $color, $direction);
    }

    &:before {
        @include triangle($back-size, $border-color, $direction);

        $mid-border-width: ($border-width / 2);
        $border-width-and-mid: $border-width + $mid-border-width;

        @if ($alt == true) {
            $mid-border-width: 0;
            $border-width-and-mid: $border-width * 2;
        }

        @if ($direction == up) or ($direction == down) {
            margin-left: - $border-width;

            @if ($direction == down) {
                margin-top: -$mid-border-width;
            } @else {
                margin-top: - $border-width-and-mid;
            }

        } @else if ($direction == right) or ($direction == left) {
            margin-top: - $border-width;

            @if ($direction == right) {
                margin-left: - $mid-border-width;
            } @else {
                margin-left: - $border-width-and-mid;
            }
        }
    }
}


@mixin codeHighlight {
    .hll { background-color: #ffffcc }
    .c { color: #228B22 } /* Comment */
    .err { color: #a61717; background-color: #e3d2d2 } /* Error */
    .k { color: #8B008B; font-weight: bold } /* Keyword */
    .cm { color: #228B22 } /* Comment.Multiline */
    .cp { color: #1e889b } /* Comment.Preproc */
    .c1 { color: #228B22 } /* Comment.Single */
    .cs { color: #8B008B; font-weight: bold } /* Comment.Special */
    .gd { color: #aa0000 } /* Generic.Deleted */
    .ge { font-style: italic } /* Generic.Emph */
    .gr { color: #aa0000 } /* Generic.Error */
    .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .gi { color: #00aa00 } /* Generic.Inserted */
    .go { color: #888888 } /* Generic.Output */
    .gp { color: #555555 } /* Generic.Prompt */
    .gs { font-weight: bold } /* Generic.Strong */
    .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .gt { color: #aa0000 } /* Generic.Traceback */
    .kc { color: #8B008B; font-weight: bold } /* Keyword.Constant */
    .kd { color: #8B008B; font-weight: bold } /* Keyword.Declaration */
    .kn { color: #8B008B; font-weight: bold } /* Keyword.Namespace */
    .kp { color: #8B008B; font-weight: bold } /* Keyword.Pseudo */
    .kr { color: #8B008B; font-weight: bold } /* Keyword.Reserved */
    .kt { color: #a7a7a7; font-weight: bold } /* Keyword.Type */
    .m { color: #B452CD } /* Literal.Number */
    .s { color: #CD5555 } /* Literal.String */
    .na { color: #658b00 } /* Name.Attribute */
    .nb { color: #658b00 } /* Name.Builtin */
    .nc { color: #008b45; font-weight: bold } /* Name.Class */
    .no { color: #00688B } /* Name.Constant */
    .nd { color: #707a7c } /* Name.Decorator */
    .ne { color: #008b45; font-weight: bold } /* Name.Exception */
    .nf { color: #008b45 } /* Name.Function */
    .nn { color: #008b45; text-decoration: underline } /* Name.Namespace */
    .nt { color: #8B008B; font-weight: bold } /* Name.Tag */
    .nv { color: #00688B } /* Name.Variable */
    .ow { color: #8B008B } /* Operator.Word */
    .w { color: #bbbbbb } /* Text.Whitespace */
    .mf { color: #B452CD } /* Literal.Number.Float */
    .mh { color: #B452CD } /* Literal.Number.Hex */
    .mi { color: #B452CD } /* Literal.Number.Integer */
    .mo { color: #B452CD } /* Literal.Number.Oct */
    .sb { color: #CD5555 } /* Literal.String.Backtick */
    .sc { color: #CD5555 } /* Literal.String.Char */
    .sd { color: #CD5555 } /* Literal.String.Doc */
    .s2 { color: #CD5555 } /* Literal.String.Double */
    .se { color: #CD5555 } /* Literal.String.Escape */
    .sh { color: #1c7e71; font-style: italic } /* Literal.String.Heredoc */
    .si { color: #CD5555 } /* Literal.String.Interpol */
    .sx { color: #cb6c20 } /* Literal.String.Other */
    .sr { color: #1c7e71 } /* Literal.String.Regex */
    .s1 { color: #CD5555 } /* Literal.String.Single */
    .ss { color: #CD5555 } /* Literal.String.Symbol */
    .bp { color: #658b00 } /* Name.Builtin.Pseudo */
    .vc { color: #00688B } /* Name.Variable.Class */
    .vg { color: #00688B } /* Name.Variable.Global */
    .vi { color: #00688B } /* Name.Variable.Instance */
    .il { color: #B452CD } /* Literal.Number.Integer.Long */
}

@mixin underlineSkippingDescenders() {
    text-decoration: underline;
    text-decoration-skip: objects edges leading-spaces trailing-spaces;
    text-decoration-skip-ink: auto;
    text-decoration-width: 1px;
}

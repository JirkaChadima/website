// Number of breakpoints.
$breakpoints-limit: length($breakpoints);
$breakpoint-keys: map-keys($breakpoints);

// List of rootsizes, breakpoints.
$sizes: map-values($rootsizes);
$points: map-values($breakpoints);

// Is value in scale in $modular-scale?
@function in-modular-scale($scale, $key) {
    $map: map-get($modular-scale, $scale);
    $output: map-has-key($map, $key);
    @return $output;
}


// Root font-size in %, outputted in correct breakpoints.
@mixin rootsize {
    font-size: strip-unit(nth($sizes, 1)) / 16 * 100%;

    // Loop through breakpoints.
    @for $i from 2 through $breakpoints-limit {
        @media screen and (min-width: strip-unit(nth($points, $i)) / 16 * 1em ) {
            font-size: strip-unit(nth($sizes, $i)) / 16 * 100%;
        }
    }
}


/**
 * Border implementation which doesn't break baseline.
 */
@mixin baselineAwareBorder($color: $border-color, $width: 1px, $orientation: 'top', $offset: 0, $size: 100%) {
    position: relative;

    &:before {
        content: '';
        display: block;
        width: $size;
        position: absolute;

        @if ($orientation == 'top') {
            top: $offset;
            border-top: $width $color solid;
        }

        @if ($orientation == 'bottom') {
            bottom: $offset;
            border-bottom: $width $color solid;
        }
    }
}


@mixin baselineAwareBorderCancel($orientation: 'top') {
    &:before {
        @if ($orientation == 'top') {
            border-top: 0;
        }

        @if ($orientation == 'bottom') {
            border-bottom: 0;
        }
    }
}

@mixin baseline-sizing($size, $push, $shift, $lineheight) {
    font-size: #{$size}rem;
    margin-bottom: #{$push}rem;
    padding-top: #{$shift}rem;
    line-height: #{$lineheight}rem;
}


@mixin baseline-in-breakpoint($breakpoint, $fontsize, $font, $lineheight, $above, $below) {
    @if not map-has-key($breakpoints, $breakpoint) {
        @warn "Unknown breakpoint class: #{$breakpoint}"
    }

    $font-value: type-of($fontsize);
    $cap-height: map-get($font, cap-height);
    $scale: map-get($modular-scale, $breakpoint);
    $size: map-get($scale, $fontsize);
    $rootsize: map-get($rootsizes, $breakpoint);

    $baseline-shift: #{$above + (($size / 2 * (($lineheight * $rootsize / $size) - $cap-height)) / $rootsize + 0.00001)};
    $baseline-push: #{$below - (($size / 2 * (($lineheight * $rootsize / $size) - $cap-height)) / $rootsize + 0.00001)};

    @include baseline-sizing($size / $rootsize, $baseline-push, $baseline-shift, $lineheight);
}


@mixin baseline($fontsize, $font, $lineheight: 2, $above: 2, $below: 2, $breakpoint: null) {
    @if not $breakpoint {
        $breakpoint: zero up;
    }

    $bp-val: nth($breakpoint, 1);
    $dir: if(length($breakpoint) > 1, nth($breakpoint, 2), only);

    @if $dir == only {
        @include baseline-in-breakpoint($bp-val, $fontsize, $font, $lineheight, $above, $below);
    } @else {
        $bps: ();
        $bp-idx: index($breakpoint-keys, $bp-val);

        @if $dir == up {
            $bps: list-slice($breakpoint-keys, $bp-idx);
        } @else if $dir == down {
            $bps: list-slice($breakpoint-keys, 1, $bp-idx);
        } @else {
            @error "#{$dir} is not a valid direction value, use one of: up, down, only";
        }

        @each $bp in $bps {
            $rat: map-get($breakpoints, $bp) / map-get($rootsizes, $bp);
            $min-width: strip-unit($rat) * 1em;

            @if $min-width > 0em {
                @media screen and (min-width: $min-width) {
                    @include baseline-in-breakpoint($bp, $fontsize, $font, $lineheight, $above, $below);
                }
            } @else {
                @include baseline-in-breakpoint($bp, $fontsize, $font, $lineheight, $above, $below);
            }
        }
    }
}


@mixin fontsize-in-breakpoint($breakpoint, $fontsize) {
    @if not map-has-key($breakpoints, $breakpoint) {
        @warn "Unknown breakpoint class: #{$breakpoint}"
    }

    $scale: map-get($modular-scale, $breakpoint);
    $size: map-get($scale, $fontsize);
    $rootsize: map-get($rootsizes, $breakpoint);

    font-size: #{$size / $rootsize}rem;
}


@mixin fontsize($fontsize, $breakpoint: null) {
    @if not $breakpoint {
        $breakpoint: zero up;
    }

    $bp-val: nth($breakpoint, 1);
    $dir: if(length($breakpoint) > 1, nth($breakpoint, 2), only);

    @if $dir == only {
        @include fontsize-in-breakpoint($bp-val, $fontsize);
    } @else {
        $bps: ();
        $bp-idx: index($breakpoint-keys, $bp-val);

        @if $dir == up {
            $bps: list-slice($breakpoint-keys, $bp-idx);
        } @else if $dir == down {
            $bps: list-slice($breakpoint-keys, 1, $bp-idx);
        } @else {
            @error "#{$dir} is not a valid direction value, use one of: up, down, only";
        }

        @each $bp in $bps {
            $rat: map-get($breakpoints, $bp) / map-get($rootsizes, $bp);
            $min-width: strip-unit($rat) * 1em;

            @if $min-width > 0em {
                @media screen and (min-width: $min-width) {
                    @include fontsize-in-breakpoint($bp, $fontsize);
                }
            } @else {
                @include fontsize-in-breakpoint($bp, $fontsize);
            }
        }
    }
}
